class Relt{timeZone=undefined;locale="en-US";constructor(options={}){if(options.timeZone){const timezone=isValidTimezone(options.timeZone);if(timezone){this.timeZone=timezone}else{throw new InvalidOptionsError("Invalid timeZone in options => "+options.timeZone)}}const date=options.date;if(typeof date==="string"){if(isValidDateString(date)){this.date=new Date(date)}else{throw new InvalidOptionsError("Invalid date in options => "+date)}}else if(date instanceof Date){this.date=date}else{this.date=new Date}setDefaults(this)}format(format="DD/MM/YYYY hh:mm:ss a Z"){return formatDate(format,this.date,this.timeZone,this.locale)}fullDate(includeTime){return formatDate(includeTime?"MMMM D, YYYY hh:mm a Z":"MMMM D, YYYY Z",this.date)}count(anotherDate){const MINUTE_MS=60*1e3;const HOUR_MS=60*MINUTE_MS;const DAY_MS=1e3*60*60*24;const now=anotherDate||relt({date:new Date,timeZone:this.timeZone}).date;const diffMs=this.date.getTime()-now.getTime();const diffTime=diffMs;const diffDays=Math.round(diffTime/(1e3*60*60*24));const diffHours=Math.floor(diffMs%DAY_MS/HOUR_MS);const diffMins=Math.floor(diffMs%HOUR_MS/MINUTE_MS);if(diffDays>=1){return`${diffDays} days ${Math.abs(diffHours)} hours ${Math.abs(diffMins)} minutes to go`}if(diffDays<0){return`${-diffDays} days ${-diffHours} hours ${-diffMins} minutes`}if(diffDays==0){if(diffHours>=1){return`${diffHours} hours ${diffMins} minutes`}if(diffMins>=1){return`${diffMins} minutes complted`}return`0 Days`}}relative(){const now=relt({date:new Date,timeZone:this.timeZone}).date;const current=relt({date:this.date,timeZone:this.timeZone}).date;const diffMs=now.getTime()-current.getTime();const diffDays=Math.round(diffMs/(1e3*60*60*24));if(diffMs>=0&&diffMs<1e3*60*60*24){return"Today"}else if(diffMs>=0&&diffDays>0&&diffDays<2){return"Yesterday"}else if(diffDays<0&&diffDays>-2){return"Tomorrow"}else if(diffDays<7&&diffDays>0){return`${this.weekDayName}`}else if(diffDays<14&&diffDays>=7){return`Last ${this.weekDayName}`}return formatDate("MMMM D, YYYY",this.date)}}function isValidDateString(dateString){const timestamp=Date.parse(dateString);return isNaN(timestamp)===false}function isValidTimezone(timezone){try{const formatter=new Intl.DateTimeFormat("en-US",{timeZone:timezone});const resolvedTimezone=formatter.resolvedOptions().timeZone;return resolvedTimezone}catch(error){return false}}function setDefaults(relt){const{weekDayName:weekDayName,month:month,day:day,year:year,period:period,timezone:timezone,hour:hour,minutes:minutes,seconds:seconds}=getValidDate(relt.locale,relt.timeZone,relt.date);relt.weekDayName=weekDayName;relt.month=month;relt.day=day;relt.year=year;relt.period=period;relt.timeZoneCode=timezone;relt.hour=hour;relt.minutes=minutes;relt.seconds=seconds}function getMonthName(monthIndex){const monthNames=["January","February","March","April","May","June","July","August","September","October","November","December"];return monthNames[monthIndex]}function getOrdinal(number){const suffixes=["th","st","nd","rd"];const remainder=number%100;const suffix=suffixes[(remainder-20)%10]||suffixes[remainder]||suffixes[0];return`${number}${suffix}`}function getValidDate(locale,timeZone,date){const options={weekday:"long",year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"numeric",second:"numeric",timeZoneName:"short",timeZone:timeZone};const formatter=new Intl.DateTimeFormat(locale,options);const dateParts=formatter.formatToParts(date);const weekDayName=dateParts.find((part=>part.type==="weekday")).value;const month=dateParts.find((part=>part.type==="month")).value;const day=dateParts.find((part=>part.type==="day")).value;const year=dateParts.find((part=>part.type==="year")).value;const hour=dateParts.find((part=>part.type==="hour")).value;const minutes=dateParts.find((part=>part.type==="minute")).value;const seconds=dateParts.find((part=>part.type==="second")).value;const period=dateParts.find((part=>part.type==="dayPeriod")).value;const timezone=dateParts.find((part=>part.type==="timeZoneName")).value;return{weekDayName:weekDayName,month:month,day:day,year:year,period:period,timezone:timezone,hour:hour,minutes:minutes,seconds:seconds}}function formatDate(format,date,timeZone,locale="en-US"){const{weekDayName:weekDayName,month:month,day:day,year:year,period:period,timezone:timezone,hour:hour,minutes:minutes,seconds:seconds}=getValidDate(locale,timeZone,date);let finalFormat=format;if(format.includes("A")){finalFormat=finalFormat.replaceAll("A",period)}if(format.includes("a")){finalFormat=finalFormat.replaceAll("a",period)}if(format.includes("DDDD")){finalFormat=finalFormat.replaceAll("DDDD",weekDayName)}if(format.includes("DD")){finalFormat=finalFormat.replaceAll("DD",day)}if(format.includes("Do")){finalFormat=finalFormat.replaceAll("Do",getOrdinal(parseInt(day)))}if(format.includes("D")){finalFormat=finalFormat.replaceAll("D",date.getDate())}if(format.includes("MMMM")){finalFormat=finalFormat.replaceAll("MMMM",getMonthName(Number(month)-1))}if(format.includes("Mx")){finalFormat=finalFormat.replaceAll("Mx",month.replace(/^0/,""))}if(format.includes("MM")){finalFormat=finalFormat.replaceAll("MM",month)}if(format.includes("Mo")){finalFormat=finalFormat.replaceAll("Mo",getOrdinal(parseInt(month)))}if(format.includes("YYYY")){finalFormat=finalFormat.replaceAll("YYYY",year)}if(format.includes("YY")){finalFormat=finalFormat.replaceAll("YY",year.substring(2,4))}if(format.includes("hh")){finalFormat=finalFormat.replaceAll("hh",hour)}if(format.includes("mm")){finalFormat=finalFormat.replaceAll("mm",minutes)}if(format.includes("ss")){finalFormat=finalFormat.replaceAll("ss",seconds)}if(format.includes("Z")){finalFormat=finalFormat.replaceAll("Z",timezone)}return finalFormat}class InvalidOptionsError extends Error{constructor(message){super(message);this.name="Relt:InvalidOptionsError"}}export const relt=options=>new Relt(options);